<pre class='metadata'>
Title: Web User Agents
Shortname: web-user-agents
Level: none
Status: NOTE-ED
Group: tag
Repository: w3ctag/user-agents
URL: https://w3ctag.github.io/user-agents
Editor: Jeffrey Yasskin, w3cid 72192, Google https://google.com, jyasskin@google.com
Editor: Sarven Capadisli, w3cid 46140, Invited Expert, https://csarven.ca/
Complain About: accidental-2119 yes, missing-example-ids yes, mixed-indents no
Markup Shorthands: markdown yes, css no
Assume Explicit For: yes
Boilerplate: conformance no
Abstract: Web user agents include both web browsers and other intermediaries
    between end-users and the web.
    Each user agent serves its user,
    not any of the other constituencies.
    A user agent owes its user various duties,
    which should be established through collective discussions
    and embodied in the various standards that user agents implement.

</pre>

# What is a web user agent # {#what}

A <dfn lt="user agent|web user agent" export>web user agent</dfn> is
any software entity that interacts with websites outside the entity itself,
on behalf of its user,
including just to display the content of websites.
In web specifications and the rest of this document,
web user agents are usually referred to as just "[=user agents=]",
but there are other kinds of user agents in other domains,
for example "mail user agents" in the context of email.
A person can use many different user agents in their day-to-day life.

The most common type of web user agent is the web browser,
including in-app browsers that can follow cross-site links.
However, user agents also include other tools like
search engines, voice-driven assistants, and generative AI systems
that present snippets or summaries of website content,
or help people navigate and interact with websites.

User agent behavior is not completely defined by web standards
or even by technical specifications in general.
In particular,
user agents choose which specifications to implement in order to best serve their users,
and they implement proprietary user interfaces and other behavior
around the specifications they do implement.

## User agents as software components ## {#ua-as-software}

As software entities, user agents can be parts of larger applications,
and they can call libraries that implement the web platform or parts of it.

If an overall application makes a clear distinction
between its pieces that are [=user agents=] and its pieces that aren't,
then only the [=user agent=] parts,
which browse "third-party" content,
need to follow the [=user agent duties=].
Parts that are clearly only showing the application's own content
can act on their own behalf,
but the application should still
give its users clear expectations about
what behavior they should expect from different parts of the app.
If the distinction between third-party and first-party content is too small,
the application should also follow the [=user agent duties=]
for its first-party content.

Similarly a library that implements the web platform
may or may not be a full [=user agent=].
Some, like [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller)
and [Android Custom Tabs](https://developer.chrome.com/docs/android/custom-tabs)
take the responsibility of implementing the [=user agent duties=]
and of making a clear distinction between the third-party content they browse
and the first-party content controlled by the embedded application.
These libraries are [=user agents=].

Other libraries, like the
[Android](https://developer.android.com/reference/android/webkit/WebView),
[iOS](https://developer.apple.com/documentation/webkit/wkwebview),
and [Windows](https://developer.microsoft.com/en-us/Microsoft-edge/webview2/)
WebView libraries,
are designed to support many kinds of applications.
Because some of these applications only include first-party content,
WebView libraries aren't meant to be [=user agents=] on their own,
and they don't implement the [=user agent duties=].

Ultimately, an embedding application is responsible for ensuring
that it follows the [=user agent duties=] if it or part of it is a [=user agent=].
This can be nearly trivial if it only browses third-party content using a [=user agent=] library.
Developers need to take extra care
to follow the [=user agent duties=]
when implementing an in-app browser using a non-[=user agent=] WebView.

# How the ecosystem works # {#ecosystem}

The structure of the web browser market helps ensure that browsers act as trustworthy agents,
but it can also give them conflicts of interest.
There are many browsers available for free,
which allows users to switch away from a browser that violates their trust.
Security and privacy researchers also actively investigate browser behavior
and publicize any unexpected or user-hostile behavior,
which helps users pick a browser and be confident that it's trustworthy.
These researchers benefit from the parts of browsers that are open source.

The trustworthiness of the available browsers is further aided
by a culture of service to end-users among the people who develop browsers.
However, we can't just assume that culture will sustain itself:
it's important that browsers which lose that culture also lose in the marketplace,
fast enough to prevent the culture-loss from spreading.


# Duties of user agents # {#duties}

Each user agent serves its user ([[!RFC8890 inline]]),
not any of the other constituencies.
A user agent owes its user various
<dfn lt="user agent duties|UA duties">duties</dfn>,
which should be established through collective discussions
and embodied in the various standards that user agents implement.


## Protection ## {#protection}

[[design-principles#safe-to-browse|It should be safe to visit a web page.]]
Visiting a page must not by itself
let the page change the user's computer or environment,
such as by installing software or accessing hardware.

Any data revealed to sites or other observers
should be aligned with the user's preferences
and follow the principle of [[design-principles#data-minimization|data minimization]].
In particular, user agents must act to
limit the potential for sites to track user activity [[unsanctioned-tracking]].

Users may [choose to share more information](https://www.w3.org/TR/privacy-principles/#dfn-opt-in),
such as by filling out forms or granting permissions.
Even then, user agents must help users avoid deception and
clearly signal when a page attempts to gain elevated access.

Access to local files or other sensitive resources
must be limited to clear, intentional user actions, with appropriate warnings.

<div class="example" id="example-protection-exploits" heading="Attacks">

User agents need to prevent malicious code on a site from
being able to escape the user agent
to modify the user’s computer or access other [=origins=].
User agents meet this duty of protection by sandboxing components,
using memory-safe languages,
and employing security teams to find and respond to vulnerabilities.
These defenses need to evolve continuously to address new threats.

</div>

<div class="example" id="example-protection-tracking" heading="Tracking">

If a person visits unrelated websites,
it's feasible to avoid sending a shared identifying cookie to embedded iframes.
A browser that does send such a cookie is failing its duty of protection.
However, revealing a stable IP address is currently unavoidable,
so it's not a violation.

</div>

<div class="example" id="example-protection-local-files" heading="Local Files">

User agents are expected prevent pages from accessing local files
unless the user explicitly selects or opens one.
This motivates behaviors like
* giving each `file:` URL its own [=url/origin=],
* removing path components from
    <a element-state for="input" lt="File Upload">`<input type=file>`</a> uploads, and
* restricting which local fonts can be used in <a at-rule>@font-face</a> rules.

However, users can still choose to share files,
e.g., via uploads or downloads.
APIs like [[file-system-access inline]] don’t violate this duty,
provided users can [[design-principles#consent|meaningfully consent]].

</div>


## Honesty ## {#honesty}

A user agent is responsible to explain to its user what's going on,
in terms that user is likely to be able to understand.
These explanations should happen at appropriate times and frequencies,
so that they actually help the user understand
instead of interrupting and distracting the user.


## Loyalty ## {#loyalty}

A user agent must serve its user's interests
over its implementer's interests
and over the interests of any other party.

A user agent can be loyal
while also collecting payment for its services,
as long as that payment is fair and was agreed ahead of time.

A user agent can also help its user
make a credible commitment to a page in order to get that page's services,
and it's not disloyal to maintain that commitment after getting the services.


<section class="non-normative">

# Acknowledgements # {#acknowledgements}

Thanks to the [[Infra inline]]
for an earlier definition of User Agents
and to [[privacy-principles inline]] for the initial version of these duties.

</section>
